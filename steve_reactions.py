
import numpy as np
import pandas as pd
from numpy import sqrt, exp

def rate_coeff(Tn, Ti, Te, v):
    """
    This function is auto-generated by some Python code, which reads a xls document, 
    which was copied from my Evernote table. It's intended to be faster than looping through 
    the DataFrame each time.

    Rates are given in cm^3 s^-1 or s^-1, or whatever combination of cm, s, ph/nm, etc., makes sense

    Inputs are assumed to be arrays:
        - Tn [K]: neutral temperature
        - Ti [K]: ion temperature (i.e., 2nd central moment of distribution)
        - Te [K]: electron temperature
        - v [m/s]: ion-neutral relative velocity

    Returns a dictionary where keys are reactions and values are rates (1 array per reaction)
    
    """
    
    amu = 1.66e-27 # 1 amu in kg
    k   = 1.38e-23 # Boltzmann constant

    xn = Tn/300
    xi = Ti/300
    xe = Te/300
    
    d = {}
    n = len(Tn)

    # N2+ + O → NO+ + N(2D)
    r = np.nan*np.zeros(n)
    r0 = (1-0.07*xi**0.21) * 1.4e-10*xi**-0.44
    r[Ti<1500] = r0[Ti<1500]
    r1 = (1-0.07*xi**0.21) * 5.2e-11*xi**0.2
    r[Ti>=1500] = r1[Ti>=1500]
    d["N2+ + O → NO+ + N(2D)"] = r

    # N2+ + O → O+ + N2
    r = np.nan*np.zeros(n)
    r0 = 0.07*xi**0.21 * 1.4e-10*xi**-0.44
    r[Ti<1500] = r0[Ti<1500]
    r1 = 0.07*xi**0.21 * 5.2e-11*xi**0.2
    r[Ti>1500] = r1[Ti>1500]
    d["N2+ + O → O+ + N2"] = r

    # N2+ + O2 → N2 + O2+
    d["N2+ + O2 → N2 + O2+"] = np.ones(n) * 5.0e-11*xi**-0.8

    # N2+ + e → N(2D) + N
    r = np.nan*np.zeros(n)
    r0 = 0.88*2.2e-7*xe**-0.39
    r[Te<1200] = r0[Te<1200]
    r1 = 0.88*1.95e-7*xe**-0.57
    r[Te>=1200] = r1[Te>=1200]
    d["N2+ + e → N(2D) + N"] = r

    # N2+ + e → N(2D) + N(2D)
    r = np.nan*np.zeros(n)
    r0 = 0.12*2.2e-7*xe**-0.39
    r[Te<1200] = r0[Te<1200]
    r1 = 0.12*1.95e-7*xe**-0.57
    r[Te>=1200] = r1[Te>=1200]
    d["N2+ + e → N(2D) + N(2D)"] = r

    # O+ + N2 → NO+ + N
    mi = 16*amu
    mn = 28*amu
    Tf = mn/(mi+mn) * (mi*v**2/(3*k) + Ti - Tn) + Tn
    xf = Tf/300
    r = np.nan*np.zeros(n)
    r0 = 1.71676e-12 - 7.19934e-13*xf + 1.33276e-13*xf**2 - 9.28213e-15*xf**3 + 6.39557e-16*xf**4
    r[Tf<3725] = r0[Tf<3725]
    r1 = -1.52489e-11 + 7.67112e-13*xf + 1.19064e-13*xf**2 - 1.30858e-15*xf**3 + 4.67756e-18*xf**4
    r[Tf>=3725] = r1[Tf>=3725]
    d["O+ + N2 → NO+ + N"] = r

    # O+ + O2 → O2+ + O
    mi = 16*amu
    mn = 32*amu
    Tf = mn/(mi+mn) * (mi*v**2/(3*k) + Ti - Tn) + Tn
    xf = Tf/300
    r = np.nan*np.zeros(n)
    r0 = 2.78932e-11 - 6.92612e-12*xf + 8.67684e-13*xf**2 - 3.47251e-14*xf**3 + 5.07097e-16*xf**4
    r[Tf<4800] = r0[Tf<4800]
    r1 = -1.74046e-11 + 3.02328e-12*xf - 2.39214e-15*xf**2 - 4.02394e-17*xf**3
    r[Tf>=4800] = r1[Tf>=4800]
    d["O+ + O2 → O2+ + O"] = r

    # O+ + NO → NO+ + O
    mi = 16*amu
    mn = 30*amu
    Tf = mn/(mi+mn) * (mi*v**2/(3*k) + Ti - Tn) + Tn
    xf = Tf/300
    r = np.nan*np.zeros(n)
    r0 = 6.40408e-13 - 1.33888e-13*xf + 7.65103e-14*xf**2 - 3.11509e-15*xf**3 + 6.62374e-17*xf**4
    r[Tf<3800] = r0[Tf<3800]
    r1 = -7.48312e-13 + 2.31502e-13*xf + 3.0716e-14*xf**2 - 2.65436e-16*xf**3 + 7.76665e-19*xf**4
    r[Tf>=3800] = r1[Tf>=3800]
    d["O+ + NO → NO+ + O"] = r

    # O2+ + NO → NO+ + O2
    d["O2+ + NO → NO+ + O2"] = np.ones(n) * 4.1e-10

    # O2+ + N2 → NO+ + NO
    d["O2+ + N2 → NO+ + NO"] = np.ones(n) * 5e-16

    # N2+ + NO → NO+ + N2
    d["N2+ + NO → NO+ + N2"] = np.ones(n) * 7.5e-9*Tn**-0.52

    # O2+ + N → NO+ + O(1S)
    d["O2+ + N → NO+ + O(1S)"] = np.ones(n) * 0.15*1.65e-10

    # O2+ + N → NO+ + O(1D)
    d["O2+ + N → NO+ + O(1D)"] = np.ones(n) * 0.85*1.65e-10

    # O2+ + e → O(1D) + O
    r = np.nan*np.zeros(n)
    r0 = 0.609*1.95e-7*xe**-0.7
    r[Te<1200] = r0[Te<1200]
    r1 = 0.609*1.93e-7*xe**-0.61
    r[Te>=1200] = r1[Te>=1200]
    d["O2+ + e → O(1D) + O"] = r

    # O2+ + e → O(1D) + O(1D)
    r = np.nan*np.zeros(n)
    r0 = 0.389*1.95e-7*xe**-0.7
    r[Te<1200] = r0[Te<1200]
    r1 = 0.389*1.93e-7*xe**-0.61
    r[Te>=1200] = r1[Te>=1200]
    d["O2+ + e → O(1D) + O(1D)"] = r

    # O2+ + e → O(1D) + O(1S)
    r = np.nan*np.zeros(n)
    r0 = 0.002*1.95e-7*xe**-0.7
    r[Te<1200] = r0[Te<1200]
    r1 = 0.002*1.93e-7*xe**-0.61
    r[Te>=1200] = r1[Te>=1200]
    d["O2+ + e → O(1D) + O(1S)"] = r

    # N+ + O2 → O2+ + N
    d["N+ + O2 → O2+ + N"] = np.ones(n) * 1.93e-10

    # N+ + O2 → O2+ + N(2D)
    d["N+ + O2 → O2+ + N(2D)"] = np.ones(n) * 8.25e-11

    # O2+ + N(2D) → N+ + O2
    d["O2+ + N(2D) → N+ + O2"] = np.ones(n) * 2.5e-10

    # N+ + O2 → NO+ + O(1D)
    d["N+ + O2 → NO+ + O(1D)"] = np.ones(n) * 1.98e-10

    # N+ + O2 → NO+ + O
    d["N+ + O2 → NO+ + O"] = np.ones(n) * 4.95e-11

    # N+ + O2 → O+ + NO
    d["N+ + O2 → O+ + NO"] = np.ones(n) * 2.8e-11

    # N+ + NO → NO+ + N
    d["N+ + NO → NO+ + N"] = np.ones(n) * 5.73e-9 * Tn**-0.44

    # N+ + NO → N2+ + O
    d["N+ + NO → N2+ + O"] = np.ones(n) * 7.08e-10 * Tn**-0.44

    # N+ + O → O+ + N
    d["N+ + O → O+ + N"] = np.ones(n) * 2.2e-12

    # NO+ + e → O + N(2D)
    r = np.nan*np.zeros(n)
    r0 = 0.76*3.5e-7*xe**-0.69
    r[Te<1200] = r0[Te<1200]
    r1 = 0.76*3.02e-7*xe**-0.56
    r[Te>=1200] = r1[Te>=1200]
    d["NO+ + e → O + N(2D)"] = r

    # NO+ + e → O + N
    r = np.nan*np.zeros(n)
    r0 = 0.24*3.5e-7*xe**-0.69
    r[Te<1200] = r0[Te<1200]
    r1 = 0.24*3.02e-7*xe**-0.56
    r[Te>=1200] = r1[Te>=1200]
    d["NO+ + e → O + N"] = r

    # N + O2 → NO + O
    d["N + O2 → NO + O"] = np.ones(n) * 1.5e-11*exp(-3600/Tn)

    # N + O → NO
    d["N + O → NO"] = np.ones(n) * 3.33e-16 * Tn**-0.5 * (1 - 0.567*Tn**-0.5)

    # N(2D) + O2 → NO + O
    d["N(2D) + O2 → NO + O"] = np.ones(n) * 0.9*6.2e-12*xn

    # N(2D) + O2 → NO + O(1D)
    d["N(2D) + O2 → NO + O(1D)"] = np.ones(n) * 0.1*6.2e-12*xn

    # N(2D) + N2 → N + N2
    d["N(2D) + N2 → N + N2"] = np.ones(n) * 1e-13 * exp(-510/Tn)

    # N(2D) + e → N + e
    d["N(2D) + e → N + e"] = np.ones(n) * 3.8e-12 * Te**0.81

    # N(2D) + O → N + O
    d["N(2D) + O → N + O"] = np.ones(n) * 1.26e-12

    # N(2D) + O → N + O(1D)
    d["N(2D) + O → N + O(1D)"] = np.ones(n) * 1.4e-13

    # N(2D) + O → NO+ + e
    d["N(2D) + O → NO+ + e"] = np.ones(n) * 2.5e-18 * Tn**0.5 * (2205+Tn)*exp(-4410/Tn)

    # N(2D) + O+ → N+ + O
    d["N(2D) + O+ → N+ + O"] = np.ones(n) * 1.3e-10

    # N + NO → N2 + O
    d["N + NO → N2 + O"] = np.ones(n) * 1.6e-10*exp(-460/Tn)

    # N(2D) + NO → N2 + O
    d["N(2D) + NO → N2 + O"] = np.ones(n) * 7e-11

    # N(2D) + NO → N + NO
    d["N(2D) + NO → N + NO"] = np.ones(n) * 6.7e-11

    # O + e → O(1D) + e
    d["O + e → O(1D) + e"] = np.ones(n) * 0.15 * Te**0.5 * (8537 + Te)/(34191 + Te)**3 * exp(-22756/Te)

    # O(1D) + N2 → O + N2
    d["O(1D) + N2 → O + N2"] = np.ones(n) * 1.8e-11*exp(107/Tn)

    # O(1D) + O2 → O + O2
    d["O(1D) + O2 → O + O2"] = np.ones(n) * 3.2e-11*exp(67/Tn)

    # O(1D) + NO → O + NO
    d["O(1D) + NO → O + NO"] = np.ones(n) * 1.5e-10

    # O(1D) + e → O + e
    d["O(1D) + e → O + e"] = np.ones(n) * 8.1e-10 * xe**0.5

    # O(1D) + O → O + O
    d["O(1D) + O → O + O"] = np.ones(n) * 2.5e-11

    # O(1S) + O → O + O
    d["O(1S) + O → O + O"] = np.ones(n) * 2e-14

    # O(1S) + O2 → O + O2
    d["O(1S) + O2 → O + O2"] = np.ones(n) * 1.6e-12 * exp( -(6750-0.0151*Tn**2)/(8.314*Tn))

    # O(1S) + e → O + e
    d["O(1S) + e → O + e"] = np.ones(n) * 1.56e-9 * xe**0.94

    # O(1S) + e → O(1D) + e
    d["O(1S) + e → O(1D) + e"] = np.ones(n) * 8.56e-09

    # O(1S) + O2 → O(1D) + O2
    d["O(1S) + O2 → O(1D) + O2"] = np.ones(n) * 7.2e-13 * exp( -(6750-0.0151*Tn**2)/(8.314*Tn))

    # O(1S) + NO → O(1D) + NO
    d["O(1S) + NO → O(1D) + NO"] = np.ones(n) * 5.12e-11

    # O(1S) + NO → O + NO
    d["O(1S) + NO → O + NO"] = np.ones(n) * 2.88e-11

    # N+ + e → N
    d["N+ + e → N"] = np.ones(n) * 3.6e-12*(250/Te)**0.7

    # O+ + e → O
    d["O+ + e → O"] = np.ones(n) * 3.7e-12*(250/Te)**0.7

    # O(1D) → O + hv6300A
    d["O(1D) → O + hv6300A"] = np.ones(n) * 0.00859

    # O(1S) → O(1D) + hv5577A
    d["O(1S) → O(1D) + hv5577A"] = np.ones(n) * 1.26

    # O(1S) → O + hv2972A
    d["O(1S) → O + hv2972A"] = np.ones(n) * 0.075

    # N(2D) → N + hv5200A
    d["N(2D) → N + hv5200A"] = np.ones(n) * 6.6e-06

    # N2(v>11) + O → NO + N
    d["N2(v>11) + O → NO + N"] = np.ones(n) * 1e-11


    return d
    